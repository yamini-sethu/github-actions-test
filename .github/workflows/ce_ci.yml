# This is a basic workflow to help you get started with Actions

name: Publish CI

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-chrome-extension:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    defaults:
      run:
        working-directory: tc/chrome/plugins
    outputs:
      VERSION: ${{ steps.version-string.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Build
        run: |-
          # fill in your build steps here...
          # we archive the dist folder and include SHA commit as the last step
          mkdir tcCrExtension
          cp *.js *.htm tcCrExtension
          #zip -r chrome-extension-${{ github.event.pull_request.head.sha }}.zip tcCrExtension
          zip -r tcCrExtension.zip tcCrExtension
          
      - name: Archive chrome-extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: tcCrExtension
          path: tc/chrome/plugins/tcCrExtension.zip


  
  # api usage reference:
  # * <https://developer.chrome.com/docs/webstore/using_webstore_api/>
  # * <https://github.com/fregante/chrome-webstore-upload/blob/main/How%20to%20generate%20Google%20API%20keys.md>
  upload-extension:
    name: Upload extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    needs: build-chrome-extension
    env:
      # you can optionally specify extension ID here, we do this so that
      # all of our environments (dev, staging, prod) have a consistent ID
      # we can reference. Otherwise the extension ID is autogenerated.
      EXTENSION_ID: iicinicfhodbfciggbkdfbihfmmhljcj

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download bundle artifact
        uses: actions/download-artifact@v3
        with:
          name:  tcCrExtension

      - name: Install webstore cli
        run: |-
          npm install -g chrome-webstore-upload-cli

      - name: Upload step
        run: chrome-webstore-upload upload --source tcCrExtension.zip 
        env:
          CLIENT_ID: ${{ secrets.CI_GOOGLE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CI_GOOGLE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CI_GOOGLE_REFRESH_TOKEN }}
          EXTENSION_ID: ${{ secrets.EXTENSION_ID }}


  

